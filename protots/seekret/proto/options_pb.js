// source: seekret/proto/options.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_descriptor_pb = require('google-protobuf/google/protobuf/descriptor_pb.js');
goog.object.extend(proto, google_protobuf_descriptor_pb);
goog.exportSymbol('proto.seekret.log_options.FieldOptions', null, global);
goog.exportSymbol('proto.seekret.log_options.LogPayloadOption', null, global);
goog.exportSymbol('proto.seekret.log_options.MessageOptions', null, global);
goog.exportSymbol('proto.seekret.log_options.MethodOptions', null, global);
goog.exportSymbol('proto.seekret.log_options.seekField', null, global);
goog.exportSymbol('proto.seekret.log_options.seekMessage', null, global);
goog.exportSymbol('proto.seekret.log_options.seekMethod', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seekret.log_options.FieldOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seekret.log_options.FieldOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seekret.log_options.FieldOptions.displayName = 'proto.seekret.log_options.FieldOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seekret.log_options.MessageOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seekret.log_options.MessageOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seekret.log_options.MessageOptions.displayName = 'proto.seekret.log_options.MessageOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seekret.log_options.MethodOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seekret.log_options.MethodOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seekret.log_options.MethodOptions.displayName = 'proto.seekret.log_options.MethodOptions';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seekret.log_options.FieldOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.seekret.log_options.FieldOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seekret.log_options.FieldOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seekret.log_options.FieldOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    hideFromLog: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seekret.log_options.FieldOptions}
 */
proto.seekret.log_options.FieldOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seekret.log_options.FieldOptions;
  return proto.seekret.log_options.FieldOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seekret.log_options.FieldOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seekret.log_options.FieldOptions}
 */
proto.seekret.log_options.FieldOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHideFromLog(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seekret.log_options.FieldOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seekret.log_options.FieldOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seekret.log_options.FieldOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seekret.log_options.FieldOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool hide_from_log = 1;
 * @return {boolean}
 */
proto.seekret.log_options.FieldOptions.prototype.getHideFromLog = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.seekret.log_options.FieldOptions} returns this
 */
proto.seekret.log_options.FieldOptions.prototype.setHideFromLog = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.seekret.log_options.FieldOptions} returns this
 */
proto.seekret.log_options.FieldOptions.prototype.clearHideFromLog = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seekret.log_options.FieldOptions.prototype.hasHideFromLog = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seekret.log_options.MessageOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.seekret.log_options.MessageOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seekret.log_options.MessageOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seekret.log_options.MessageOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    hideFromLog: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seekret.log_options.MessageOptions}
 */
proto.seekret.log_options.MessageOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seekret.log_options.MessageOptions;
  return proto.seekret.log_options.MessageOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seekret.log_options.MessageOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seekret.log_options.MessageOptions}
 */
proto.seekret.log_options.MessageOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHideFromLog(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seekret.log_options.MessageOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seekret.log_options.MessageOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seekret.log_options.MessageOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seekret.log_options.MessageOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool hide_from_log = 1;
 * @return {boolean}
 */
proto.seekret.log_options.MessageOptions.prototype.getHideFromLog = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.seekret.log_options.MessageOptions} returns this
 */
proto.seekret.log_options.MessageOptions.prototype.setHideFromLog = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.seekret.log_options.MessageOptions} returns this
 */
proto.seekret.log_options.MessageOptions.prototype.clearHideFromLog = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seekret.log_options.MessageOptions.prototype.hasHideFromLog = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seekret.log_options.MethodOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.seekret.log_options.MethodOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seekret.log_options.MethodOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seekret.log_options.MethodOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    logPayload: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seekret.log_options.MethodOptions}
 */
proto.seekret.log_options.MethodOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seekret.log_options.MethodOptions;
  return proto.seekret.log_options.MethodOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seekret.log_options.MethodOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seekret.log_options.MethodOptions}
 */
proto.seekret.log_options.MethodOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.seekret.log_options.LogPayloadOption} */ (reader.readEnum());
      msg.setLogPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seekret.log_options.MethodOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seekret.log_options.MethodOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seekret.log_options.MethodOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seekret.log_options.MethodOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.seekret.log_options.LogPayloadOption} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional LogPayloadOption log_payload = 1;
 * @return {!proto.seekret.log_options.LogPayloadOption}
 */
proto.seekret.log_options.MethodOptions.prototype.getLogPayload = function() {
  return /** @type {!proto.seekret.log_options.LogPayloadOption} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.seekret.log_options.LogPayloadOption} value
 * @return {!proto.seekret.log_options.MethodOptions} returns this
 */
proto.seekret.log_options.MethodOptions.prototype.setLogPayload = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.seekret.log_options.MethodOptions} returns this
 */
proto.seekret.log_options.MethodOptions.prototype.clearLogPayload = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seekret.log_options.MethodOptions.prototype.hasLogPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.seekret.log_options.LogPayloadOption = {
  NONE: 0,
  REQUEST: 1,
  RESPONSE: 2,
  BOTH: 3
};


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `seekField`.
 * @type {!jspb.ExtensionFieldInfo<!proto.seekret.log_options.FieldOptions>}
 */
proto.seekret.log_options.seekField = new jspb.ExtensionFieldInfo(
    51000,
    {seekField: 0},
    proto.seekret.log_options.FieldOptions,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.seekret.log_options.FieldOptions.toObject),
    0);

google_protobuf_descriptor_pb.FieldOptions.extensionsBinary[51000] = new jspb.ExtensionFieldBinaryInfo(
    proto.seekret.log_options.seekField,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.seekret.log_options.FieldOptions.serializeBinaryToWriter,
    proto.seekret.log_options.FieldOptions.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
google_protobuf_descriptor_pb.FieldOptions.extensions[51000] = proto.seekret.log_options.seekField;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `seekMessage`.
 * @type {!jspb.ExtensionFieldInfo<!proto.seekret.log_options.MessageOptions>}
 */
proto.seekret.log_options.seekMessage = new jspb.ExtensionFieldInfo(
    51000,
    {seekMessage: 0},
    proto.seekret.log_options.MessageOptions,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.seekret.log_options.MessageOptions.toObject),
    0);

google_protobuf_descriptor_pb.MessageOptions.extensionsBinary[51000] = new jspb.ExtensionFieldBinaryInfo(
    proto.seekret.log_options.seekMessage,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.seekret.log_options.MessageOptions.serializeBinaryToWriter,
    proto.seekret.log_options.MessageOptions.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
google_protobuf_descriptor_pb.MessageOptions.extensions[51000] = proto.seekret.log_options.seekMessage;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `seekMethod`.
 * @type {!jspb.ExtensionFieldInfo<!proto.seekret.log_options.MethodOptions>}
 */
proto.seekret.log_options.seekMethod = new jspb.ExtensionFieldInfo(
    51000,
    {seekMethod: 0},
    proto.seekret.log_options.MethodOptions,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.seekret.log_options.MethodOptions.toObject),
    0);

google_protobuf_descriptor_pb.MethodOptions.extensionsBinary[51000] = new jspb.ExtensionFieldBinaryInfo(
    proto.seekret.log_options.seekMethod,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.seekret.log_options.MethodOptions.serializeBinaryToWriter,
    proto.seekret.log_options.MethodOptions.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
google_protobuf_descriptor_pb.MethodOptions.extensions[51000] = proto.seekret.log_options.seekMethod;

goog.object.extend(exports, proto.seekret.log_options);
