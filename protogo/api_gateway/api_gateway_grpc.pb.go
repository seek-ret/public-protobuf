// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api_gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiGatewayClient is the client API for ApiGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiGatewayClient interface {
	FetchWorkspaceConfiguration(ctx context.Context, in *FetchWorkspaceConfigurationRequest, opts ...grpc.CallOption) (*FetchWorkspaceConfigurationResponse, error)
}

type apiGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewApiGatewayClient(cc grpc.ClientConnInterface) ApiGatewayClient {
	return &apiGatewayClient{cc}
}

func (c *apiGatewayClient) FetchWorkspaceConfiguration(ctx context.Context, in *FetchWorkspaceConfigurationRequest, opts ...grpc.CallOption) (*FetchWorkspaceConfigurationResponse, error) {
	out := new(FetchWorkspaceConfigurationResponse)
	err := c.cc.Invoke(ctx, "/seekret.api_gateway.ApiGateway/FetchWorkspaceConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiGatewayServer is the server API for ApiGateway service.
// All implementations must embed UnimplementedApiGatewayServer
// for forward compatibility
type ApiGatewayServer interface {
	FetchWorkspaceConfiguration(context.Context, *FetchWorkspaceConfigurationRequest) (*FetchWorkspaceConfigurationResponse, error)
	mustEmbedUnimplementedApiGatewayServer()
}

// UnimplementedApiGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedApiGatewayServer struct {
}

func (UnimplementedApiGatewayServer) FetchWorkspaceConfiguration(context.Context, *FetchWorkspaceConfigurationRequest) (*FetchWorkspaceConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchWorkspaceConfiguration not implemented")
}
func (UnimplementedApiGatewayServer) mustEmbedUnimplementedApiGatewayServer() {}

// UnsafeApiGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiGatewayServer will
// result in compilation errors.
type UnsafeApiGatewayServer interface {
	mustEmbedUnimplementedApiGatewayServer()
}

func RegisterApiGatewayServer(s grpc.ServiceRegistrar, srv ApiGatewayServer) {
	s.RegisterService(&ApiGateway_ServiceDesc, srv)
}

func _ApiGateway_FetchWorkspaceConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchWorkspaceConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).FetchWorkspaceConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seekret.api_gateway.ApiGateway/FetchWorkspaceConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).FetchWorkspaceConfiguration(ctx, req.(*FetchWorkspaceConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiGateway_ServiceDesc is the grpc.ServiceDesc for ApiGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seekret.api_gateway.ApiGateway",
	HandlerType: (*ApiGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchWorkspaceConfiguration",
			Handler:    _ApiGateway_FetchWorkspaceConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seekret/proto/api_gateway/api_gateway.proto",
}
